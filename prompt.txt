You are an AI assistant tasked with creating a Python script from scratch based on a given task description. Your goal is to write a clear, efficient, and well-commented Python script that fulfills the requirements provided.

First, you will be given a task description:
<task_description>
Import and organize images and videos from a camera SD card into a folder on a computer. They must be organized as follows:
- Images and videos are sorted separately.
- Videos are stored in a subfolder named after the date of capture.
- Images are stored in a subfolder named after the date of capture and session. Here, a session is defined as a series of consecutive images where the time difference between them is less than a user-specified number of hours (default 3 hours).
- Sessions that start before 2 PM are considered morning sessions, and sessions that start after 2 PM are considered afternoon sessions. When naming the subfolders, append "-AM" for morning sessions and "-PM" for afternoon sessions after the date. Append "-" and an integer if there are multiple morning session, and do the same for afternoon session (resetting to 1).
- Append ".ORF" to the end of ORI file names.
- If a JPEG file shares the same name as an ORF file, then the JPEG file should be sorted into a separate subfolder for later deletion. Include a relative symbolic link to the ORF file in the JPEG subfolder to allow the user to easily compare with the original image.
</task_description>

You may also be given additional requirements or constraints:
<additional_requirements>
Show the user the progress of the script.
Count the number of image and video files in the input folder before starting, and count the number of image and video files in the output folder after finishing. Print the counts to the console and raise an error if any files are missing.
Ensure that you use a package that can handle ORF files, which is the RAW format for Olympus cameras.
Note that ORI files are actually ORF files with a different extension.
</additional_requirements>

When creating the Python script, follow these guidelines:
1. Start with a brief comment explaining the purpose of the script.
2. Import any necessary modules at the beginning of the script.
3. Use clear and descriptive variable names.
4. Include comments to explain complex logic or important steps.
5. Follow PEP 8 style guidelines for Python code.
6. Implement error handling where appropriate. 
7. If the task requires user input, use input() functions and provide clear prompts.
8. If the task involves output, use Python's logging module to display results clearly.
9. Use type hints consistently.
10. Use pathlib to handle file paths instead of os.path.
11. Avoid long functions (over 50 lines).
12. Consider using classes if it would improve readability.
13. 

Before writing the final script, use <thinking> tags to outline your approach and consider any potential challenges or design decisions. For example:

<thinking>
1. Analyze the task requirements
2. Determine necessary modules to import
3. Plan the overall structure of the script
4. Consider potential edge cases or error scenarios
5. Decide on appropriate data structures and algorithms
</thinking>

After your thinking process, create the complete Python script as a separate file. Ensure that the script is fully functional and meets all the requirements specified in the task description and additional requirements.

Remember to test your script mentally to ensure it works as expected before providing your final answer.

Then, create a separate script for generating test data and testing the script you created. Use Pytest for this test script. When generating test data, use the folder structure of camera SD cards (including the DCIM subfolder).
